// Code generated by protoc-gen-go. DO NOT EDIT.
// source: issuing.proto

package protocol

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IssueBlockchainCertificateRequest struct {
	IssuerId             string   `protobuf:"bytes,1,opt,name=IssuerId,proto3" json:"IssuerId,omitempty"`
	ProcessId            string   `protobuf:"bytes,2,opt,name=ProcessId,proto3" json:"ProcessId,omitempty"`
	GroupId              int32    `protobuf:"varint,3,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssueBlockchainCertificateRequest) Reset()         { *m = IssueBlockchainCertificateRequest{} }
func (m *IssueBlockchainCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*IssueBlockchainCertificateRequest) ProtoMessage()    {}
func (*IssueBlockchainCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4903f9b3ac1edb16, []int{0}
}

func (m *IssueBlockchainCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueBlockchainCertificateRequest.Unmarshal(m, b)
}
func (m *IssueBlockchainCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueBlockchainCertificateRequest.Marshal(b, m, deterministic)
}
func (m *IssueBlockchainCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueBlockchainCertificateRequest.Merge(m, src)
}
func (m *IssueBlockchainCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_IssueBlockchainCertificateRequest.Size(m)
}
func (m *IssueBlockchainCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueBlockchainCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IssueBlockchainCertificateRequest proto.InternalMessageInfo

func (m *IssueBlockchainCertificateRequest) GetIssuerId() string {
	if m != nil {
		return m.IssuerId
	}
	return ""
}

func (m *IssueBlockchainCertificateRequest) GetProcessId() string {
	if m != nil {
		return m.ProcessId
	}
	return ""
}

func (m *IssueBlockchainCertificateRequest) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

type IssueBlockchainCertificateReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IssueBlockchainCertificateReply) Reset()         { *m = IssueBlockchainCertificateReply{} }
func (m *IssueBlockchainCertificateReply) String() string { return proto.CompactTextString(m) }
func (*IssueBlockchainCertificateReply) ProtoMessage()    {}
func (*IssueBlockchainCertificateReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_4903f9b3ac1edb16, []int{1}
}

func (m *IssueBlockchainCertificateReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IssueBlockchainCertificateReply.Unmarshal(m, b)
}
func (m *IssueBlockchainCertificateReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IssueBlockchainCertificateReply.Marshal(b, m, deterministic)
}
func (m *IssueBlockchainCertificateReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssueBlockchainCertificateReply.Merge(m, src)
}
func (m *IssueBlockchainCertificateReply) XXX_Size() int {
	return xxx_messageInfo_IssueBlockchainCertificateReply.Size(m)
}
func (m *IssueBlockchainCertificateReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IssueBlockchainCertificateReply.DiscardUnknown(m)
}

var xxx_messageInfo_IssueBlockchainCertificateReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*IssueBlockchainCertificateRequest)(nil), "protocol.IssueBlockchainCertificateRequest")
	proto.RegisterType((*IssueBlockchainCertificateReply)(nil), "protocol.IssueBlockchainCertificateReply")
}

func init() {
	proto.RegisterFile("issuing.proto", fileDescriptor_4903f9b3ac1edb16)
}

var fileDescriptor_4903f9b3ac1edb16 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x2c, 0x2e, 0x2e,
	0xcd, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0xc9, 0xf9, 0x39,
	0x4a, 0xe5, 0x5c, 0x8a, 0x9e, 0xc5, 0xc5, 0xa5, 0xa9, 0x4e, 0x39, 0xf9, 0xc9, 0xd9, 0xc9, 0x19,
	0x89, 0x99, 0x79, 0xce, 0xa9, 0x45, 0x25, 0x99, 0x69, 0x99, 0xc9, 0x89, 0x25, 0xa9, 0x41, 0xa9,
	0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x52, 0x5c, 0x1c, 0x60, 0x45, 0x45, 0x9e, 0x29, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x70, 0xbe, 0x90, 0x0c, 0x17, 0x67, 0x40, 0x51, 0x7e, 0x72, 0x6a,
	0x71, 0xb1, 0x67, 0x8a, 0x04, 0x13, 0x58, 0x12, 0x21, 0x20, 0x24, 0xc1, 0xc5, 0xee, 0x5e, 0x94,
	0x5f, 0x5a, 0xe0, 0x99, 0x22, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x1a, 0x04, 0xe3, 0x2a, 0x29, 0x72,
	0xc9, 0xe3, 0xb3, 0xb8, 0x20, 0xa7, 0xd2, 0xa8, 0x83, 0x91, 0x8b, 0xcf, 0x13, 0xe2, 0xee, 0xe0,
	0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0xa1, 0x32, 0x2e, 0x29, 0xdc, 0xba, 0x84, 0xb4, 0xf5, 0x60,
	0xfe, 0xd2, 0x23, 0xe8, 0x29, 0x29, 0x4d, 0xe2, 0x14, 0x17, 0xe4, 0x54, 0x2a, 0x31, 0x24, 0xb1,
	0x81, 0xd5, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x5b, 0xf4, 0xdb, 0x48, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IssuingServiceClient is the client API for IssuingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IssuingServiceClient interface {
	IssueBlockchainCertificate(ctx context.Context, in *IssueBlockchainCertificateRequest, opts ...grpc.CallOption) (*IssueBlockchainCertificateReply, error)
}

type issuingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIssuingServiceClient(cc grpc.ClientConnInterface) IssuingServiceClient {
	return &issuingServiceClient{cc}
}

func (c *issuingServiceClient) IssueBlockchainCertificate(ctx context.Context, in *IssueBlockchainCertificateRequest, opts ...grpc.CallOption) (*IssueBlockchainCertificateReply, error) {
	out := new(IssueBlockchainCertificateReply)
	err := c.cc.Invoke(ctx, "/protocol.IssuingService/IssueBlockchainCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuingServiceServer is the server API for IssuingService service.
type IssuingServiceServer interface {
	IssueBlockchainCertificate(context.Context, *IssueBlockchainCertificateRequest) (*IssueBlockchainCertificateReply, error)
}

// UnimplementedIssuingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIssuingServiceServer struct {
}

func (*UnimplementedIssuingServiceServer) IssueBlockchainCertificate(ctx context.Context, req *IssueBlockchainCertificateRequest) (*IssueBlockchainCertificateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueBlockchainCertificate not implemented")
}

func RegisterIssuingServiceServer(s *grpc.Server, srv IssuingServiceServer) {
	s.RegisterService(&_IssuingService_serviceDesc, srv)
}

func _IssuingService_IssueBlockchainCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueBlockchainCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuingServiceServer).IssueBlockchainCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.IssuingService/IssueBlockchainCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuingServiceServer).IssueBlockchainCertificate(ctx, req.(*IssueBlockchainCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IssuingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.IssuingService",
	HandlerType: (*IssuingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueBlockchainCertificate",
			Handler:    _IssuingService_IssueBlockchainCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "issuing.proto",
}
